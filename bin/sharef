#!/usr/bin/env node

const program = require('yargs')
const onExit = require('async-exit-hook')
const debug = require('debug')('sharef')
const chalk = require('chalk')
const share = require('../')
const ip = require('internal-ip')

const { PORT = 8000 } = process.env

const { argv } = program
  .usage('usage: sharef [-hDV] [options] <pathspec>')
  .option('h', {
    type: 'boolean',
    alias: 'help',
    describe: 'Show help usage'
  })
  .option('V', {
    type: 'boolean',
    alias: 'version',
    describe: 'Show program version'
  })
  .option('D', {
    type: 'boolean',
    alias: 'debug',
    default: false,
    describe: 'Enable debug output'
  })
  .option('p', {
    type: 'number',
    alias: 'port',
    default: PORT,
    describe: 'Port for HTTP server to listen on'
  })
  .option('m', {
    type: 'number',
    alias: 'max',
    default: Infinity,
    describe: 'Max shares before exiting',
  })

if (true === argv.debug) {
  require('debug').enable('sharef*')
  debug('Debug output enabled')
}

const { port, max } = argv
const [ file ] = argv._
const server = share(file, { port })

let shares = 0

onExit(onexit)

server.on('ready', onready)
server.on('share', onshare)
server.on('error', onerror)
server.on('close', onclose)

function onready() {
  ip.v4().then(onip).catch(onerror)
  info(`ID: ${server.id.toString('hex')}`)
  info(`File: ${file}`)
  info(`Max Shares: ${max}`)
}

function onip(address) {
  info(`IP: ${address}`)
  info(`HTTP Server Port: ${port}`)
  info(`HTTP Server URL: http://${address}:${port}/${server.id.toString('hex')}`)

  if ('string' === typeof server.src) {
    info(`HTTP Server URL: http://${address}:${port}/${server.src}`)
  }

  server.drive.ready(ondatready)
}

function ondatready() {
  info(`DAT Discovery Key: ${server.drive.discoveryKey.toString('hex')}`)
  info(`DAT Key: ${server.drive.key.toString('hex')}`)
  info(`DAT URL: dat://${server.drive.key.toString('hex')}`)
}

function onshare(req) {
  info('New share:', req)

  if (++shares >= max) {
    warn('Maximum shares reached. Closing server.')
    server.close()
    process.exit(0)
  }

  if (max !== Infinity && shares < max) {
    warn(max - shares, 'shares before this process will die')
  }
}

function onclose() {
  warn('Server closed')
}

function onexit(done) {
  warn('Exiting')
  if (true !== server.closed) {
    server.close()
  }
  done()
  process.exit(0)
}

function onerror(err) {
  error(err)
}

function info(...messages) {
  console.log(chalk`{blue.bold  info}`, ...messages)
}

function warn(...messages) {
  console.error(chalk`{yellow.bold  warn}: %s`, ...messages)
}

function error(err) {
  console.error(chalk`{red.bold error}: %s`, err.message)
}
